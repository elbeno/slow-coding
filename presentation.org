#    -*- mode: org -*-
#+OPTIONS: reveal_center:t reveal_progress:nil reveal_history:nil reveal_control:nil
#+OPTIONS: reveal_mathjax:t reveal_rolling_links:nil reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1600 reveal_height:900
#+OPTIONS: toc:nil <:nil timestamp:nil email:t reveal_slide_number:"c/t"
#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: none
#+REVEAL_THEME: blood
#+REVEAL_HLEVEL: 1
#+REVEAL_EXTRA_CSS: ./presentation.css
#+REVEAL_ROOT: ../reveal.js/

#+TITLE: Slow Coding
#+AUTHOR: Ben Deane
#+DATE: June 9th, 2020

#+REVEAL_HTML: <script type="text/javascript" src="./presentation.js"></script>

#+REVEAL_TITLE_SLIDE: <h2>%t</h2><br/><h3>or, The Blacksmith and the Gardener</h3><br/><br/><h3>%a / <a href=\"http://twitter.com/ben_deane\">@ben_deane</a></h3><h4>%d</h4>

* Settings                                                         :noexport:
#+begin_source elisp
(set-face-foreground 'font-lock-comment-face "magenta")
(set-face-foreground 'font-lock-comment-delimiter-face "magenta")
#+end_source

* Coding Quickly is a Virtue?
#+REVEAL_HTML: <div class='vertspace1'></div>
#+ATTR_REVEAL: :frag (appear)
 - We always have deadlines
 - Competitive programming
 - Tech interview culture
 - Social pressure

#+BEGIN_NOTES
It seems that we live in a world where fast coding is prized.

Programming is an activity of invention, where we forge code that bends the
machine to our will.

What about coding as a discovery activity?
#+END_NOTES

* A cliché
#+REVEAL_HTML: <div class='vertspace1'></div>

"I realised the solution while I was in the shower."

Or: while exercising, just before going to sleep, etc, etc.

Why does this happen?

#+begin_notes
This has happened to us all.

Why does this happen?

Can we make it happen more often? I'm going to offer some ideas.
#+end_notes

* This happens sometimes...
#+REVEAL_HTML: <div class='vertspace1'></div>
#+ATTR_REVEAL: :frag (appear)
1. Get a hard problem to solve
1. Devise a solution
1. Spend N days coding, debugging, testing
1. It works!
1. ...
1. On day N+k, realise what you've written can be made much simpler

#+REVEAL_HTML: <br/><br/><h2>
#+ATTR_REVEAL: :frag appear
...if you're lucky
# +REVEAL_HTML: </h2>

#+BEGIN_NOTES
This also has probably happened to us all.

Step 6 often doesn't happen until I revisit the code months later. When I can
see the wood and not just the trees.

Again, how can we make try to make step 6 happen more often and when we're writing the
code rather than months afterwards?
#+END_NOTES

* Inspiration out of the blue?
#+REVEAL_HTML: <div class='vertspace1'></div>
It. Never. Happens.

#+REVEAL_HTML: <blockquote nil><p>&quot;Dans les champs de l'observation le hasard ne favorise que les esprits préparés.&quot;</p>
#+REVEAL_HTML: <div></div><div class='author'>-- Louis Pasteur</div></blockquote>

#+begin_notes
It's important to realize: it's no good just sitting around waiting for
lightning to strike. This quote is usually rendered in English as "Fortune favours the
prepared mind".

The popular myth of the genius lone inventor or the sudden flash of inspiration
out of nowhere is just that: a myth.

Too often, we don't hear about the years of work and preparation that go into
making a discovery: we just hear about the end product.

It's worth remembering why WD-40 is so named. We have to put in the legwork.
#+end_notes

* How To Solve It (Polya)
#+REVEAL_HTML: <div class='vertspace1'></div>
#+ATTR_REVEAL: :frag (appear)
1. Understand the problem
1. Devise a plan
1. Carry out the plan
1. Look back

#+REVEAL_HTML: <br/><br/>
#+ATTR_REVEAL: :frag appear
Step 4 is important! Build this step into your coding. \\
Take time to ruminate on what you've done.

#+BEGIN_NOTES
How do we solve coding problems?

The book: heuristics and practice for solving problems.

Beat between 3 and 4.
#+END_NOTES

* "Plan to throw one away...
#+REVEAL_HTML: <div class='vertspace1'></div>
...you will, anyhow."
#+REVEAL_HTML: <div align="right">
-- Fred Brooks, [[http://http://www.amazon.com/The-Mythical-Man-Month-Engineering-Anniversary/dp/0201835959][/The Mythical Man Month/]]
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <br/>
#+ATTR_REVEAL: :frag appear
At least recognize that if you implemented something, \\
that was just the first thing you tried to implement.

#+REVEAL_HTML: <br/>
#+ATTR_REVEAL: :frag appear
You likely found a local maximum.

#+BEGIN_NOTES
You need to think about more than one solution, in some depth, in order to truly
make a tradeoff.

Otherwise a "tradeoff" is just "this part of the code isn't very good".
#+END_NOTES

* Techniques

#+BEGIN_NOTES
Let's take a look at some deliberate techniques for reflecting on code.
#+END_NOTES

* Reflect on the Structure
#+REVEAL_HTML: <div class='vertspace1'></div>
#+ATTR_REVEAL: :frag appear
Take the time to spot optimizations/simplifications.
#+ATTR_REVEAL: :frag (appear)
 - common subexpressions
 - dependent conditions
 - strength reductions
 - hoisting
 - loop choices (for/while/do-while)

#+BEGIN_NOTES
Don't rely on the compiler to optimize things like this.

Make the code simpler and it's often faster. Do less.

These transformations can end up transforming algorithms. The compiler can't see
things like that.
#+END_NOTES

* Reflect on the Interface
#+REVEAL_HTML: <div class='vertspace1'></div>
#+ATTR_REVEAL: :frag appear
Take the time to analyse the interface.
#+ATTR_REVEAL: :frag (appear)
 - interface boundaries
 - consistency of argument types/positions
 - minimal, complete
 - well-performing
 - identify the invariants
#+REVEAL_HTML: <br/><br/>

#+BEGIN_NOTES
Are the mechanical things correct? Is it easy to use?

Can a user do everything they want to?

Is it easy to write code that performs well?

Member functions vs free functions or static functions. Public/private? Runtime
polymorphism vs parametric polymorphism? Object lifetimes & ownership?
#+END_NOTES

* Reflect on the Functionality
#+REVEAL_HTML: <div class='vertspace1'></div>
#+ATTR_REVEAL: :frag appear
Take the time to analyse the functionality.
#+ATTR_REVEAL: :frag (appear)
 - law of useful return
 - law of completeness
 - law of separating types
 - law of interface refinement

#+BEGIN_NOTES
Return useful things that are computed.

Don't assume that types need to be the same. Try varying them and exploring the
design space.

Can you genericise? With what parameters? What are the true constraints on
types? Try varying them and see how that affects performance or use.

Programming is a multi-pass activity. Refining an interface requires you to have
used it - may take a while. (Possibly years.)
#+END_NOTES

* Reflect on the Problem
#+REVEAL_HTML: <div class='vertspace1'></div>
#+ATTR_REVEAL: :frag appear
What are the data dependencies? What are the algorithms?

#+REVEAL_HTML: <br/>
#+ATTR_REVEAL: :frag appear
It is often the case, in coding as in mathematics, that a general problem can be
solved more easily and more efficiently than a specific case.

#+REVEAL_HTML: <br/>
#+ATTR_REVEAL: :frag appear
Step back and recognize what you've really done. Take advantage of dead
geniuses.

#+BEGIN_NOTES
Why do we study data structures, algorithms, patterns? Because many times we end
up implementing them. Whether we recognize it or not.

How To Solve It heuristics: Related problems - related solutions - relaxed
constraints - more specific - more general - using all the data - recognizing
progress.

Having a good toolbox of algorithms helps here. Or at least, knowing some terms
to google.
#+END_NOTES

* Ask absurd questions
#+REVEAL_HTML: <div class='vertspace1'></div>
#+ATTR_REVEAL: :frag (appear)
 - What if <X> was actually a <Y>?
 - What if everything was an <X>?
 - What if <object> could do <function>?
 - What if we couldn't do <X>?

#+begin_notes
In exploring the possibilities for a system, I sometimes ask what seem to be
silly questions. Sometimes the answers are not so silly.

Sometimes I see that what seemed impossible actually might be possible.

Sometimes what I was thinking about as one type of thing can be viewed as
another type of thing.

This gives me insight into related solutions, constraints, and possibilities. It
helps me see the choices I've made that I didn't realize I was making.

These questions are often very basic, low level questions about how the system works.
#+end_notes

* Process

#+BEGIN_NOTES
Let's take a look at the broader process of problem solving implementing
solutions. Why do answers so often come to us in the shower?
#+END_NOTES

* Think on it? Sleep on it?
#+REVEAL_HTML: <div class='vertspace1'></div>
It's not about letting the answer just come to you.

#+REVEAL_HTML: <br/>
#+ATTR_REVEAL: :frag appear
What actually happens:
#+ATTR_REVEAL: :frag (appear)
1. Understand the problem
1. Devise a plan
1. Carry out the plan
1. Go to 1 with new insights

#+BEGIN_NOTES
It's usually not enough to just try to solve a problem without the
implementation experience.

Implementation experience is definitely part of understanding the problem.

Especially if you are working in a large codebase on a problem that has to take
into account existing code and constraints.
#+END_NOTES

* Why Do This?
#+REVEAL_HTML: <div class='vertspace1'></div><h3>
#+REVEAL_HTML: <div id="columns"> <div id="double">
 - Conscious
 - Subconscious
#+REVEAL_HTML: </div></div></h3>

#+REVEAL_HTML: <div id="columns"> <div id="double">
#+ATTR_REVEAL: :frag (appear appear appear appear appear appear appear appear appear appear) :frag_idx (1 1 2 2 3 3 4 4 5 5)
 - analysis
 - synthesis
 - critical thinking
 - making connections
 - tactics
 - strategy
 - optimizing
 - seeing abstractions
 - academic
 - experiential
#+REVEAL_HTML: </div></div>

#+REVEAL_HTML: <br/>
#+ATTR_REVEAL: :frag appear
Engage both parts in solving problems. Work hard on a problem. Then sleep on it.

#+BEGIN_NOTES
We've all had the experience of solutions coming to us on waking/in the
shower/on our commute/etc.

But you don't just solve problems in your sleep. It doesn't just happen that
way.

You work at solving problems consciously in order to build the agenda for your
subconscious mind to work on.

If the problem is hard, sometimes it takes a long time to come to a solution.
You can work on multiple things at once, as long as you keep the problem ticking
over.
#+END_NOTES

* The blacksmith and the gardener
#+REVEAL_HTML: <div class='vertspace1'></div>
Programming is a creative endeavour.

#+REVEAL_HTML: <blockquote nil><p>&quot;When I am working on a problem, I never think about beauty. But when I have finished, if the solution is not beautiful, I know it is wrong.&quot;</p>
#+REVEAL_HTML: <div></div><div class='author'>-- R. Buckminster Fuller</div></blockquote>

#+begin_notes
Our conscious mind is the blacksmith. Sometimes we must forge a program.

Our subconscious mind is the gardener. Sometimes we must nurture a program.

Both forms of creation are useful and can work together.
#+end_notes

* Thanks For Listening
#+REVEAL_HTML: <div class='vertspace1'></div>

#+REVEAL_HTML: <blockquote nil><p>&quot;We shall not cease from exploration, and the end of all our exploring will be to arrive where we started and know the place for the first time.&quot;</p>
#+REVEAL_HTML: <div></div><div class='author'>-- T. S. Eliot</div></blockquote><br/><br/>

Take time to look back.

Reflect consciously.

Take time for subconscious synthesis.

#+BEGIN_NOTES
There is always something new to be discovered about a problem.
#+END_NOTES
